#include <stdio.h>
#include <stdlib.h>
#include <complex.h>
#include <math.h>

// Define complex double for convenience
typedef double complex cdouble;

// Function to solve tridiagonal system (adapted from PDF appendix)
// This version is destructive to 'b' and 'c' arrays for simplicity,
// but can be made reusable by allocating scratch space as shown in the PDF.
void solve_tridiagonal_destructive(cdouble x[], int N, cdouble a_diag[], cdouble b_diag[], cdouble c_diag[]) {
    int n;
    // Note: In our specific problem, a_diag and c_diag are always 1.0.
    // We pass them as arrays for generality, but can optimize for constant values.

    // Forward elimination
    c_diag[0] = c_diag[0] / b_diag[0];
    x[0] = x[0] / b_diag[0];

    for (n = 1; n < N; n++) {
        cdouble m = 1.0 / (b_diag[n] - a_diag[n] * c_diag[n - 1]);
        if (n < (N - 1)) {
            c_diag[n] = c_diag[n] * m;
        }
        x[n] = (x[n] - a_diag[n] * x[n - 1]) * m;
    }

    // Back substitution
    for (n = N - 2; n >= 0; --n) {
        x[n] = x[n] - c_diag[n] * x[n + 1];
    }
}

// Function to calculate the probability density |Phi(x)|^2
double calculate_probability_density(cdouble phi) {
    return creal(phi * conj(phi));
}

// Function to calculate P_D(n)
double calculate_PD(cdouble *phi, int N) {
    double pd = 0.0;
    // Detectors have a width of N/5 [cite: 54]
    // Probability to the right: sum from j=4N/5 to N [cite: 54]
    for (int j = (int)(4.0 * N / 5.0); j <= N; j++) {
        pd += calculate_probability_density(phi[j]);
    }
    return pd;
}

// Main function for the simulation
int main() {
    // 1. Initial Parameters [cite: 48, 49]
    int N_values[] = {500, 1000, 2000}; // N values for study [cite: 66]
    double lambda_values[] = {0.1, 0.3, 0.5, 1.0, 5.0, 10.0}; // lambda values for study [cite: 67]
    int num_simulations = 1000; // At least 10^3 simulations [cite: 63]
    int n_ciclos = 5; // Example value, can be varied. Ensure n_ciclos <= N/4 [cite: 42]

    // Loop through different N values
    for (int n_idx = 0; n_idx < sizeof(N_values) / sizeof(N_values[0]); n_idx++) {
        int N = N_values[n_idx];
        double h = 1.0; // Assuming h=1 for simplicity with re-scaled units. Can be adjusted.
        // Re-scaled constants: h_bar = 1, m = 1/2 [cite: 5]
        double k0_tilde = 2.0 * M_PI * n_ciclos / N; // k_0_tilde = k_0 * h [cite: 45]
        double s_tilde = 1.0 / (4.0 * k0_tilde * k0_tilde); // s_tilde = s / h^2 [cite: 47]

        printf("\n--- Simulation for N = %d ---\n", N);

        // Loop through different lambda values
        for (int lambda_idx = 0; lambda_idx < sizeof(lambda_values) / sizeof(lambda_values[0]); lambda_idx++) {
            double lambda = lambda_values[lambda_idx];
            int total_mT = 0; // Total times particle detected to the right [cite: 54]
            double total_max_PD = 0.0; // Sum of max PD for averaging [cite: 63]

            printf("  Lambda = %.1f:\n", lambda);

            for (int sim = 0; sim < num_simulations; sim++) {
                cdouble *phi = (cdouble *)malloc((N + 1) * sizeof(cdouble));
                cdouble *chi = (cdouble *)malloc((N + 1) * sizeof(cdouble));
                cdouble *b_coeffs = (cdouble *)malloc((N + 1) * sizeof(cdouble));
                cdouble *a_diag_tdm = (cdouble *)malloc((N + 1) * sizeof(cdouble)); // For tridiagonal matrix
                cdouble *c_diag_tdm = (cdouble *)malloc((N + 1) * sizeof(cdouble)); // For tridiagonal matrix

                // Initialize wave function Phi(x,0) [cite: 38, 45]
                // phi_j_0 = exp(i * k0_tilde * j) * exp(-8 * (4*j - N)^2 / N^2) [cite: 45]
                double x0 = (double)N * h / 4.0; // Initial center of Gaussian [cite: 43]
                double sigma = (double)N * h / 16.0; // Width of Gaussian [cite: 43]

                for (int j = 0; j <= N; j++) {
                    double x_j = j * h;
                    phi[j] = cexp(I * k0_tilde * x_j) * cexp(-pow(x_j - x0, 2) / (2.0 * sigma * sigma));
                }

                // Apply boundary conditions: Phi_0,n = Phi_N,n = 0 [cite: 18, 49]
                phi[0] = 0.0;
                phi[N] = 0.0;

                // Normalize initial wave function (important for probability interpretation) [cite: 3]
                double norm_factor = 0.0;
                for (int j = 0; j <= N; j++) {
                    norm_factor += calculate_probability_density(phi[j]) * h;
                }
                norm_factor = sqrt(norm_factor);
                for (int j = 0; j <= N; j++) {
                    phi[j] /= norm_factor;
                }

                // Define Potential V_j [cite: 44, 46]
                // V_j_tilde = lambda * k0_tilde^2 if j in [2N/5, 3N/5], else 0 [cite: 46]
                double *V_tilde = (double *)malloc((N + 1) * sizeof(double));
                for (int j = 0; j <= N; j++) {
                    if (j >= (int)(2.0 * N / 5.0) && j <= (int)(3.0 * N / 5.0)) {
                        V_tilde[j] = lambda * k0_tilde * k0_tilde;
                    } else {
                        V_tilde[j] = 0.0;
                    }
                }

                // Find the time t = n_D corresponding to the first local maximum of P_D(t) [cite: 58, 59, 60]
                int nD = 0;
                double max_PD_val = 0.0;
                double prev_PD = 0.0;
                double current_PD = 0.0;
                double next_PD = 0.0;
                int max_steps = 2 * N; // A heuristic for maximum evolution steps to find a maximum

                for (int n = 0; n < max_steps; n++) {
                    // Prepare coefficients for the tridiagonal system (Equation 18) [cite: 27, 31]
                    // chi_{j+1,n} + [-2 + 2i/s_tilde - V_tilde_j] * chi_{j,n} + chi_{j-1,n} = (4i/s_tilde) * Phi_j,n
                    // A_j^- = 1, A_j^0 = -2 + 2i/s_tilde - V_tilde_j, A_j^+ = 1 [cite: 31]
                    // b_j,n = 4i * Phi_j,n / s_tilde [cite: 31]

                    for (int j = 0; j <= N; j++) {
                        // For the tridiagonal solver, a_diag and c_diag are 1.0 (sub- and super-diagonal)
                        a_diag_tdm[j] = 1.0;
                        c_diag_tdm[j] = 1.0;

                        b_coeffs[j] = (-2.0 + 2.0 * I / s_tilde - V_tilde[j]); // A_j^0
                        // The right-hand side of the system (b_j,n in the PDF's notation)
                        chi[j] = (4.0 * I / s_tilde) * phi[j];
                    }

                    // Boundary conditions for chi [cite: 32]
                    chi[0] = 0.0;
                    chi[N] = 0.0;

                    // Solve the tridiagonal system for chi [cite: 29]
                    solve_tridiagonal_destructive(chi, N + 1, a_diag_tdm, b_coeffs, c_diag_tdm);

                    // Update Phi for the next time step (Equation 15) [cite: 26, 29]
                    // Phi_{j,n+1} = chi_{j,n} - Phi_{j,n}
                    for (int j = 0; j <= N; j++) {
                        phi[j] = chi[j] - phi[j];
                    }

                    // Re-apply boundary conditions after update
                    phi[0] = 0.0;
                    phi[N] = 0.0;

                    // Check for normalization conservation (optional, but good for debugging) [cite: 3]
                    // double current_norm = 0.0;
                    // for (int j = 0; j <= N; j++) {
                    //     current_norm += calculate_probability_density(phi[j]) * h;
                    // }
                    // printf("Normalization at step %d: %f\n", n, current_norm);

                    // Calculate P_D(n) [cite: 54]
                    current_PD = calculate_PD(phi, N);

                    // Logic to find the first local maximum of P_D(t) [cite: 59]
                    if (n > 0) { // Need at least two points to compare
                        if (current_PD > prev_PD && current_PD > next_PD && nD == 0) {
                             // This simple check might be problematic if P_D(t) is noisy.
                             // A better approach would be to store a few values and find the peak.
                             // For simplicity here, we'll assume a smooth peak.
                             // More robust: look for a change in sign of the derivative or a windowed average.
                             // For this problem, we'll iterate until max_steps or the peak is found.
                        }
                    }

                    if (current_PD > max_PD_val) {
                        max_PD_val = current_PD;
                        nD = n + 1; // nD corresponds to the number of steps
                    }

                    prev_PD = current_PD; // For the next iteration's derivative check
                }

                // After finding nD (or reaching max_steps if no clear peak found quickly),
                // we have the 'nD' steps to evolve for the measurement.
                // The current 'phi' is already at 'nD' for this simulation if max_steps was sufficient.

                // Simulate the measurement process [cite: 61, 62]
                double p = (double)rand() / RAND_MAX; // Random number p in [0, 1] [cite: 61]
                if (p < max_PD_val) { // If p < P_D(nD) then particle is detected [cite: 62]
                    total_mT++;
                }
                total_max_PD += max_PD_val; // Accumulate for averaging

                free(phi);
                free(chi);
                free(b_coeffs);
                free(a_diag_tdm);
                free(c_diag_tdm);
                free(V_tilde);
            }

            // Calculate K = mT / m [cite: 54, 63]
            double K = (double)total_mT / num_simulations;
            double avg_max_PD = total_max_PD / num_simulations;

            printf("    K = %.6f\n", K);
            printf("    Average P_D(nD) = %.6f\n", avg_max_PD);

            // 2. Compare K and P_D(nD) and explain the relationship [cite: 63, 64]
            // The simulation's K should approximate avg_max_PD.
            // This is because the simulation models the quantum probability.
            // K is the experimental transmission coefficient, while P_D(nD) is the theoretical probability
            // of finding the particle in the detector region at the optimal measurement time.
            // In a large number of simulations, the frequentist probability (K) should converge to the
            // quantum mechanical probability (P_D(nD)). The maximization method ensures we're measuring
            // at a time when the particle has had a chance to interact with the barrier and the probability
            // of being detected on the right is highest, but not so long that it disperses too much.

            // 3. Estimate statistical error of K [cite: 65]
            // K is essentially the mean of a series of Bernoulli trials (success = detection, failure = no detection).
            // For Bernoulli trials, the variance of the mean is p(1-p)/m, where p is the probability (K in this case)
            // and m is the number of trials. The standard error is sqrt(p(1-p)/m).
            double std_error_K = sqrt(K * (1.0 - K) / num_simulations);
            printf("    Statistical Error of K = %.6f\n", std_error_K);
        }
    }

    // Additional tasks (can be implemented as extensions):
    // 4. Study dependence on N for K [cite: 66] - already incorporated in the loop.
    // 5. Study dependence on V(x) (lambda) for K [cite: 67] - already incorporated in the loop.
    // 6. Compare with theoretical results [cite: 68] - Requires analytical solutions for comparison.
    // 7. Calculate expected values of observables [cite: 68, 69] - Requires implementing integral calculations.
    // 8. Study transmission through multiple barriers [cite: 70, 71] - Requires modifying the potential setup.

    return 0;
}